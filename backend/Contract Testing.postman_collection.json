{
	"info": {
		"_postman_id": "d150fb7e-26c1-444f-8238-18b2bb492507",
		"name": "Contract Testing",
		"description": "# About this collection\n\nThis collection helps you set up contract tests to ensure that two separate systems are compatible and can communicate with one another.\n\n## **Using the collection**\n\n**Step 1:** Send the sample requests and view the response and test results.\n\n**Step 2:** Replace the sample request URLs with your desired API endpoints.\n\n**Step 3:** Customize the tests in the \"Tests\" tab if needed. Don't forget to save your changes.\n\n### Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)\n\n[  \n](https://postman.postman.co/documentation/24552533-5bead607-0197-4e1d-87d4-3160bc7631c1?entity=&branch=&version=)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38881220",
		"_collection_link": "https://justicewatch.postman.co/workspace/Team-Workspace~061ec57b-a835-4ba6-8811-28549102e33b/collection/42467066-d150fb7e-26c1-444f-8238-18b2bb492507?action=share&source=collection_link&creator=38881220"
	},
	"item": [
		{
			"name": "Check for Valid Query Params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Response Code should be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time should be less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Each object should have required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('name');\r",
							"        pm.expect(item).to.have.property('city');\r",
							"        pm.expect(item).to.have.property('state');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Validate data types of fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item.id).to.be.a('number');\r",
							"        pm.expect(item.name).to.be.a('string');\r",
							"        pm.expect(item.city).to.be.a('string');\r",
							"        pm.expect(item.state).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain at least one object\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Fields should not be empty\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item.name).to.not.be.empty;\r",
							"        pm.expect(item.city).to.not.be.empty;\r",
							"        pm.expect(item.state).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Latitude and Longitude should be valid numbers\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(parseFloat(item.lat)).to.be.a('number');\r",
							"        pm.expect(parseFloat(item.long)).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"IDs should be unique\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const ids = jsonData.map(item => item.id);\r",
							"    const uniqueIds = new Set(ids);\r",
							"    pm.expect(ids.length).to.equal(uniqueIds.size);\r",
							"});\r",
							"\r",
							"pm.test(\"Fields related to URLs should exist\", function () {\r",
							"    const jsonData = pm.response.json(); // Parse the response body as JSON\r",
							"    \r",
							"    // Ensure the response is an array\r",
							"    pm.expect(jsonData).to.be.an('array'); \r",
							"\r",
							"    // Iterate through each object in the array\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item).to.have.property(\"news_link\"); // Check if 'news_link' exists\r",
							"        pm.expect(item.news_link).to.not.be.null;     // Ensure 'news_link' is not null\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5001/api/violence",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5001",
					"path": [
						"api",
						"violence"
					]
				},
				"description": "The tests in the request validate the response code and the data returned in the response is the same as the one being sent."
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://postman-echo.com"
		}
	]
}