image: docker:latest

services:
  - docker:dind

variables:
  DOCKER_TLS_CERTDIR: "/certs"

before_script:
  - apk add --no-cache make
  - apk add --no-cache make curl

test_frontend:
  stage: test
  image: node:latest
  before_script:
    # Update package lists and install prerequisites
    - apt-get update
    - apt-get install -y wget unzip

    # Install Google Chrome
    - wget -q -O google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - apt-get install -y ./google-chrome.deb

    # Install ChromeDriver
    # Get the latest ChromeDriver version matching your Chrome release
    - LATEST_CHROMEDRIVER=$(wget -qO- https://chromedriver.storage.googleapis.com/LATEST_RELEASE)
    - wget -q -O chromedriver.zip "https://chromedriver.storage.googleapis.com/${LATEST_CHROMEDRIVER}/chromedriver_linux64.zip"
    - unzip -o chromedriver.zip -d /usr/local/bin/
    - chmod +x /usr/local/bin/chromedriver

    # Verify installations
    - google-chrome --version
    - chromedriver --version

  script:
    - cd frontend
    - npm install
    # Start your development server in the background
    - npm run dev &
    # Wait for the server to start
    - sleep 15
    # Run Selenium tests in headless mode (ensure your test runner passes headless flags to Selenium)
    - npm run test

test_backend_unittests:
  stage: test
  image: python:latest
  before_script:
    - echo "Setting up Python environment..."
    - pip install --no-cache-dir -r backend/requirements.txt
  script:
    - echo "Running API"
    - cd oldBack
    - nohup python3 mainAPI.py & # Start the server in the background
    - sleep 10 # Wait for the server to start
    - echo "Running Python unit tests..."
    - python3 unit-tests.py

test_backend_postman:
  image:
    name: postman/newman:alpine
    entrypoint: [""]
  # before_script:
  #   - apk update && apk add python3 py3-pip postgresql-dev gcc musl-dev
  #   - cd backend
  #   - python3 -m venv .venv
  #   - source .venv/bin/activate
  #   - pip install -r requirements.txt
  script:
    # - nohup python3 mainAPI.py & # Start the server in the background
    # - sleep 10 # Wait for the server to start
    - cd oldBack
    - echo "Running Postman Tests"
    - ls
    - newman run Testing.postman_collection.json

build_production:
  stage: build
  script:
    # Build step
    - echo "NODE_ENV=production" > .env.prod
    # This is all required because the frontend is not set up to use env variables from the environment, it needs them in a .env file
    - echo "GITLAB_ACCESS_TOKEN=$GITLAB_ACCESS_TOKEN" >> .env.prod
    - echo "NEXT_PUBLIC_MAPS_API_KEY=$NEXT_PUBLIC_MAPS_API_KEY" >> .env.prod
    - echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env.prod
    # This is required because during Docker build step (when the frontend is compiled) env_file and env from docker-compose are not available
    - cp .env.prod frontend/.env
    - echo "Building production image..."
    - make build-production
    - echo Printing all images
    - docker images
    # Save the image to a tar file
    - echo Saving image to tar file
    - docker save registry.gitlab.com/gjkeller1/cs373-spring-2025-group-07/justicewatch-frontend:latest-prod > image.tar
  artifacts:
    paths:
      - image.tar
    expire_in: 1 hour

push_to_registry:
  stage: build
  needs: [build_production]
  only:
    - main
  script:
    # Load the image from the tar file
    - echo Loading image from tar file
    - docker load < image.tar
    - echo Uploading to registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push registry.gitlab.com/gjkeller1/cs373-spring-2025-group-07/justicewatch-frontend:latest-prod
    - |
      curl -X POST -H 'Content-type: application/json' --data '{
        "text": "ðŸš€ New JusticeWatch frontend image pushed to registry!\n*Branch:* `'"$CI_COMMIT_REF_NAME"'`\n*Commit:* `'"$CI_COMMIT_SHA"'`\n*By:* '"$GITLAB_USER_NAME"'"
      }' $SLACK_WEBHOOK_URL
